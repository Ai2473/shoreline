package net.shoreline.client.impl.module.exploit;

import net.minecraft.entity.projectile.FireworkRocketEntity;
import net.minecraft.network.packet.c2s.play.PlayPongC2SPacket;
import net.minecraft.network.packet.s2c.play.ChunkDataS2CPacket;
import net.minecraft.network.packet.s2c.play.ChunkRenderDistanceCenterS2CPacket;
import net.minecraft.network.packet.s2c.play.EntitiesDestroyS2CPacket;
import net.shoreline.client.api.config.Config;
import net.shoreline.client.api.config.setting.NumberConfig;
import net.shoreline.client.api.event.listener.EventListener;
import net.shoreline.client.api.module.ModuleCategory;
import net.shoreline.client.api.module.ToggleModule;
import net.shoreline.client.impl.event.TickEvent;
import net.shoreline.client.impl.event.entity.projectile.RemoveFireworkEvent;
import net.shoreline.client.impl.event.network.PacketEvent;
import net.shoreline.client.init.Managers;
import net.shoreline.client.mixin.accessor.AccessorFireworkRocketEntity;

import java.util.ArrayList;
import java.util.List;

/**
 *
 *
 * @author Shoreline
 * @since 1.0
 */
public class ExtendedFireworkModule extends ToggleModule
{
    private final List<PlayPongC2SPacket> packetList = new ArrayList<>();
    //
    private boolean extendFirework;
    private FireworkRocketEntity firework;
    //
    private int chunkLoads;

    /**
     *
     */
    public ExtendedFireworkModule()
    {
        super("ExtendedFirework", "Extends firework boost duration",
                ModuleCategory.EXPLOITS);
    }

    @Override
    public void onDisable()
    {
        if (firework != null)
        {
            ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
        }
        firework = null;
        extendFirework = false;
        for (PlayPongC2SPacket packet : packetList)
        {
            Managers.NETWORK.sendPacket(packet);
        }
        packetList.clear();
        chunkLoads = 0;
    }

    @EventListener
    public void onRemoveFirework(RemoveFireworkEvent event)
    {
        if (mc.player == null)
        {
            return;
        }
        if (mc.player.isFallFlying() && firework != event.getRocketEntity()
                && ((AccessorFireworkRocketEntity) event.getRocketEntity()).hookWasShotByEntity()
                && ((AccessorFireworkRocketEntity) event.getRocketEntity()).getShooter() == mc.player)
        {
            extendFirework = true;
            event.cancel();
            firework = event.getRocketEntity();
            chunkLoads = 0;
        }
    }

    @EventListener
    public void onTick(TickEvent event)
    {
        if (!extendFirework)
        {
            return;
        }
        if (!mc.player.isFallFlying() || chunkLoads > 10)
        {
            extendFirework = false;
            if (firework != null)
            {
                ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove();
                firework = null;
            }
            for (PlayPongC2SPacket packet : packetList)
            {
                Managers.NETWORK.sendPacket(packet);
            }
            packetList.clear();
        }
    }

    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (mc.player == null || mc.world == null)
        {
            return;
        }
        if (event.getPacket() instanceof PlayPongC2SPacket packet
                && extendFirework && mc.player.isFallFlying())
        {
            packetList.add(packet);
            event.cancel();
        }
    }

    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (mc.player == null || mc.world == null)
        {
            return;
        }
        if (event.getPacket() instanceof EntitiesDestroyS2CPacket packet
                && extendFirework && mc.player.isFallFlying())
        {
            for (int id : packet.getEntityIds())
            {
                if (id == firework.getId())
                {
                    event.cancel();
                    return;
                }
            }
        }
        if (event.getPacket() instanceof ChunkRenderDistanceCenterS2CPacket)
        {
            chunkLoads++;
        }
    }
}