package com.caspian.client.impl.module.exploit;

import com.caspian.client.api.event.EventStage;
import com.caspian.client.api.event.listener.EventListener;
import com.caspian.client.api.module.ModuleCategory;
import com.caspian.client.api.module.ToggleModule;
import com.caspian.client.impl.event.TickEvent;
import com.caspian.client.impl.event.network.PacketEvent;
import com.caspian.client.init.Managers;
import net.minecraft.item.ChorusFruitItem;
import net.minecraft.item.ItemStack;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.TeleportConfirmC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Vec3d;

/**
 *
 *
 * @author linus
 * @since 1.0
 */
public class ChorusControlModule extends ToggleModule
{
    //
    private boolean cancelChorusTeleport;
    private int chorusTeleportId;
    private Vec3d chorusTeleport;

    /**
     *
     */
    public ChorusControlModule()
    {
        super("ChorusControl", "Allows player to control chorus teleports",
                ModuleCategory.EXPLOITS);
    }

    /**
     *
     */
    @Override
    public void onDisable()
    {
        if (mc.player != null && chorusTeleport != null)
        {
            mc.player.setPosition(chorusTeleport);
            Managers.NETWORK.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(
                    chorusTeleport.getX(), chorusTeleport.getY(),
                    chorusTeleport.getZ(), mc.player.isOnGround()));
            Managers.NETWORK.sendPacket(new TeleportConfirmC2SPacket(chorusTeleportId));
        }
        chorusTeleport = null;
        cancelChorusTeleport = false;
    }

    /**
     *
     * @param event
     */
    @EventListener
    public void onPacketOutbound(PacketEvent.Outbound event)
    {
        if (cancelChorusTeleport)
        {
            if (event.getPacket() instanceof PlayerMoveC2SPacket packet && packet.changesPosition())
            {
                event.cancel();
            }
            else if (event.getPacket() instanceof TeleportConfirmC2SPacket packet)
            {
                event.cancel();
                chorusTeleportId = packet.getTeleportId();
            }
        }
    }

    /**
     *
     * @param event
     */
    @EventListener
    public void onPacketInbound(PacketEvent.Inbound event)
    {
        if (event.getPacket() instanceof PlayerPositionLookS2CPacket packet && cancelChorusTeleport)
        {
            event.cancel();
            chorusTeleport = new Vec3d(packet.getX(), packet.getY(),
                    packet.getZ());
        }
    }

    /**
     *
     * @param event
     */
    @EventListener
    public void onTick(TickEvent event)
    {
        if (event.getStage() != EventStage.PRE)
        {
            return;
        }
        if (!cancelChorusTeleport && mc.player.isUsingItem())
        {
            ItemStack stack = mc.player.getStackInHand(mc.player.getActiveHand());
            if (stack.getItem() instanceof ChorusFruitItem
                    && stack.getMaxUseTime() - mc.player.getItemUseTime() < 2)
            {
                cancelChorusTeleport = true;
            }
        }
    }
}
